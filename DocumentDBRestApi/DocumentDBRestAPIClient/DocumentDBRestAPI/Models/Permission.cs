// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using Microsoft.Rest;
using Newtonsoft.Json.Linq;

namespace DocumentDBRestAPIClient.Models
{
    public class Permission
    {
        /// <summary>
        ///     Initializes a new instance of the Permission class.
        /// </summary>
        public Permission()
        {
            PermissionMode = new LazyList<string>();
        }

        /// <summary>
        ///     Initializes a new instance of the Permission class with required
        ///     arguments.
        /// </summary>
        public Permission(string id, IList<string> permissionMode, string resource)
            : this()
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (permissionMode == null)
            {
                throw new ArgumentNullException(nameof(permissionMode));
            }
            if (resource == null)
            {
                throw new ArgumentNullException(nameof(resource));
            }
            Id = id;
            PermissionMode = permissionMode;
            Resource = resource;
        }

        /// <summary>
        ///     Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                var etagValue = inputObject["_etag"];
                if (etagValue != null && etagValue.Type != JTokenType.Null)
                {
                    Etag = (string)etagValue;
                }
                var ridValue = inputObject["_rid"];
                if (ridValue != null && ridValue.Type != JTokenType.Null)
                {
                    Rid = (string)ridValue;
                }
                var selfValue = inputObject["_self"];
                if (selfValue != null && selfValue.Type != JTokenType.Null)
                {
                    Self = (string)selfValue;
                }
                var tokenValue = inputObject["_token"];
                if (tokenValue != null && tokenValue.Type != JTokenType.Null)
                {
                    Token = (string)tokenValue;
                }
                var tsValue = inputObject["_ts"];
                if (tsValue != null && tsValue.Type != JTokenType.Null)
                {
                    Ts = (string)tsValue;
                }
                var idValue = inputObject["id"];
                if (idValue != null && idValue.Type != JTokenType.Null)
                {
                    Id = (string)idValue;
                }
                var permissionModeSequence = inputObject["permissionMode"];
                if (permissionModeSequence != null && permissionModeSequence.Type != JTokenType.Null)
                {
                    foreach (var permissionModeValue in (JArray)permissionModeSequence)
                    {
                        PermissionMode.Add((string)permissionModeValue);
                    }
                }
                var resourceValue = inputObject["resource"];
                if (resourceValue != null && resourceValue.Type != JTokenType.Null)
                {
                    Resource = (string)resourceValue;
                }
            }
        }

        /// <summary>
        ///     Serialize the object
        /// </summary>
        /// <returns>
        ///     Returns the json model for the type Permission
        /// </returns>
        public virtual JToken SerializeJson(JToken outputObject)
        {
            if (outputObject == null)
            {
                outputObject = new JObject();
            }
            if (Id == null)
            {
                throw new ArgumentNullException(nameof(Id));
            }
            if (PermissionMode is ILazyCollection<string> &&
                ((ILazyCollection<string>)PermissionMode).IsInitialized == false || PermissionMode == null)
            {
                throw new ArgumentNullException(nameof(PermissionMode));
            }
            if (Resource == null)
            {
                throw new ArgumentNullException(nameof(Resource));
            }
            if (Etag != null)
            {
                outputObject["_etag"] = Etag;
            }
            if (Rid != null)
            {
                outputObject["_rid"] = Rid;
            }
            if (Self != null)
            {
                outputObject["_self"] = Self;
            }
            if (Token != null)
            {
                outputObject["_token"] = Token;
            }
            if (Ts != null)
            {
                outputObject["_ts"] = Ts;
            }
            if (Id != null)
            {
                outputObject["id"] = Id;
            }
            if (PermissionMode != null)
            {
                if (PermissionMode is ILazyCollection<string> == false ||
                    ((ILazyCollection<string>)PermissionMode).IsInitialized)
                {
                    var permissionModeSequence = new JArray();
                    outputObject["permissionMode"] = permissionModeSequence;
                    foreach (var permissionModeItem in PermissionMode)
                    {
                        if (permissionModeItem != null)
                        {
                            permissionModeSequence.Add(permissionModeItem);
                        }
                    }
                }
            }
            if (Resource != null)
            {
                outputObject["resource"] = Resource;
            }
            return outputObject;
        }

        /// <summary>
        ///     Optional. This is a system generated property that specifies the
        ///     resource etag required for optimistic concurrency control.
        /// </summary>
        public string Etag { get; set; }

        /// <summary>
        ///     Required. This is a user settable property. It is the unique name
        ///     that identifies the permission, i.e. no two permissions will share
        ///     the same id within a user. The id must not exceed 255 characters.
        /// </summary>
        public string Id { get; set; }

        /// <summary>
        ///     Required. The access mode on the resource for the user: All or
        ///     Read. All provides read, write, and delete access to a resource.
        ///     Read restricts the user to read access on the resource.
        /// </summary>
        public IList<string> PermissionMode { get; set; }

        /// <summary>
        ///     Required. The full addressable path of the resource associated with
        ///     the permission. For example, dbs/ruJjAA==/colls/ruJjAM9UnAA=/.
        /// </summary>
        public string Resource { get; set; }

        /// <summary>
        ///     Optional. This is a system generated property.
        /// </summary>
        public string Rid { get; set; }

        /// <summary>
        ///     Optional. This is a system generated property.
        /// </summary>
        public string Self { get; set; }

        /// <summary>
        ///     Optional. This is a system generated resource token for the
        ///     particular resource and user.
        /// </summary>
        public string Token { get; set; }

        /// <summary>
        ///     Optional. This is a system generated property. It specifies the
        ///     last updated timestamp of the resource. The value is a timestamp
        /// </summary>
        public string Ts { get; set; }
    }
}