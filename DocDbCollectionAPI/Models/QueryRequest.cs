// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using Hyak.Common;
using Newtonsoft.Json.Linq;

namespace DocDbCollectionAPI.Models
{
    public class QueryRequest
    {

        /// <summary>
        /// Initializes a new instance of the QueryRequest class.
        /// </summary>
        public QueryRequest()
        {
            Parameters = new LazyList<string>();
        }

        /// <summary>
        /// Initializes a new instance of the QueryRequest class with required
        /// arguments.
        /// </summary>
        public QueryRequest(string queryString, IList<string> parameters)
            : this()
        {
            if (queryString == null)
            {
                throw new ArgumentNullException(nameof(queryString));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }
            QueryString = queryString;
            Parameters = parameters;
        }


        /// <summary>
        /// Serialize the object
        /// </summary>
        /// <returns>
        /// Returns the json model for the type QueryRequest
        /// </returns>
        public virtual JToken SerializeJson(JToken outputObject)
        {
            if (outputObject == null)
            {
                outputObject = new JObject();
            }
            var collection = Parameters as ILazyCollection;
            if (collection != null && !collection.IsInitialized || Parameters == null)
            {
                throw new ArgumentNullException(nameof(Parameters));
            }
            if (QueryString == null)
            {
                throw new ArgumentNullException(nameof(QueryString));
            }
            if (Parameters != null)
            {
                var lazyCollection = Parameters as ILazyCollection;
                if (lazyCollection != null == false || ((ILazyCollection)Parameters).IsInitialized)
                {
                    var parametersSequence = new JArray();
                    outputObject["parameters"] = parametersSequence;
                    foreach (var parametersItem in Parameters)
                    {
                        if (parametersItem != null)
                        {
                            parametersSequence.Add(parametersItem);
                        }
                    }
                }
            }
            if (QueryString != null)
            {
                outputObject[nameof(QueryString)] = QueryString;
            }
            return outputObject;
        }

        /// <summary>
        /// Required. A JSON array of parameters specified as name value pairs.
        /// items: type: string description: Perform a SQL query on a resource
        /// QueryResponseBody: properties: _rid: type: string description: The
        /// resource id for the collection used within the query _count: type:
        /// integer format: int32 description: The number of items returned.
        /// Resource_array: type: string description: The array containing the
        /// query results. description: The response body for the query
        /// operation consists of the _rid of the parent resource of the
        /// resource being queried, and the resource array containing the
        /// resource properties for the projection and selection
        /// </summary>
        public IList<string> Parameters { get; set; }

        /// <summary>
        /// Required. The SQL query string for the query
        /// </summary>
        public string QueryString { get; set; }
    }
}
